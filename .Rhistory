plot(data$HeatingLoad, data$CoolingLoad, xlab="Heating Load", ylab="Cooling Load")
plot(data$RelativeCompactness, data$SurfaceArea, xlab="Relative Compactness", ylab="Surface Area")
summary(RelativeCompactness)
summary(SurfaceArea)
summary(WallArea)
summary(RoofArea)
summary(OverallHeight)
summary(Orientation)
summary(GlazingArea)
summary(GlazingAreaDistribution)
summary(HeatingLoad)
summary(CoolingLoad)
set.seed(1)
data_rand <- data[order(runif(1000)), ]
data_train <- data_rand[1:900, ]
data_test  <- data_rand[901:1000, ]
View(data_test)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(data)
values1 <- na.omit(values)
values1
View(values1)
View(values1)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(data, na.rm=TRUE)
values
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(data, na.rm=TRUE)
values
View(values)
myData <- data.frame(data_train,data_test)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(data)
values
library(readr)
EnergyEfficiency <- read_csv("D:/DataMining/DataMiningAssignment/data/regression/EnergyEfficiency.csv")
View(EnergyEfficiency)
View(EnergyEfficiency)
values <- data.frame(data)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(data)
values
plot(data$HeatingLoad, data$CoolingLoad, xlab="Heating Load", ylab="Cooling Load")
plot(data$RelativeCompactness, data$SurfaceArea, xlab="Relative Compactness", ylab="Surface Area")
summary(RelativeCompactness)
summary(SurfaceArea)
summary(WallArea)
summary(RoofArea)
summary(Orientation)
summary(GlazingArea)
summary(OverallHeight)
summary(GlazingAreaDistribution)
summary(HeatingLoad)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(data, na.rm=TRUE)
values
values <- data.frame(data)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(data)
values
data <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(data)
values
plot(data$HeatingLoad, data$CoolingLoad, xlab="Heating Load", ylab="Cooling Load")
plot(data$HeatingLoad, data$CoolingLoad, xlab="Heating Load", ylab="Cooling Load")
plot(data$RelativeCompactness, data$SurfaceArea, xlab="Relative Compactness", ylab="Surface Area")
summary(RelativeCompactness)
attach(values)
summary(RelativeCompactness)
summary(SurfaceArea)
summary(WallArea)
summary(RoofArea)
summary(OverallHeight)
summary(Orientation)
summary(GlazingArea)
summary(GlazingAreaDistribution)
summary(HeatingLoad)
summary(CoolingLoad)
set.seed(1)
data_rand <- data[order(runif(1000)), ]
data_train <- data_rand[1:900, ]
data_test  <- data_rand[901:1000, ]
myData <- data.frame(data_train,data_test)
regression.model <- lm(data_test ~ data_train)
source('D:/DataMining/DataMiningAssignment/EnergyEfficiency_Regression.R')
plot(data_train, data_test, xlab="x values", ylab="y values")
regression.model <- lm(data_test ~ data_train)
myData <- data.frame(data_train,data_test)
View(myData)
regression.model <- lm(data_test ~ data_train)
abline(lm(HeatingLoad ~ data_train, data = myData))
abline(lm(HeatingLoad ~ CoolingLoad, data = myData))
methods(plot)
?plot.lm
plot(regression.model, which = 1)
myData <- data.frame(data_train,data_test)
regression.model <- lm(data_test ~ data_train)
myData <- data.frame(data_train,data_test)
regression.model <- lm(HeatingLoad ~ CoolingLoad)
plot(data_train, data_test, xlab="x values", ylab="y values")
myData <- data.frame(data_train,data_test)
regression.model <- lm(HeatingLoad ~ CoolingLoad)
plot(HeatingLoad, CoolingLoad, xlab="x values", ylab="y values")
abline(lm(HeatingLoad ~ CoolingLoad, data = myData))
methods(plot)
?plot.lm
plot(regression.model, which = 1)
table(HeatingLoad)
table(CoolingLoad)
head(data)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
library(C50)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
set.seed(2)
occ_detectRand <- occ_detect[order(runif(150)), ]
occ_detectTrain <- occ_detectRand[1:100, ]
occ_detectTest <- occ_detectRand[101:150, ]
prop.table(table(occ_detectTrain$Occupancy))
prop.table(table(occ_detectTest$Occupancy))
occ_detectTreeModel <- C5.0(as.factor(Occupancy) ~ ., data= occ_detectTrain)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
plot(occ_detectTreeModel)
occ_detectPredict <- predict(occ_detectTreeModel, occocc_detectTest)
View(occ_detectTest)
engy_eff <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(engy_eff)
plot(engy_eff$HeatingLoad, engy_eff$CoolingLoad, xlab="Heating Load", ylab="Cooling Load")
plot(engy_eff$RelativeCompactness, engy_eff$SurfaceArea, xlab="Relative Compactness", ylab="Surface Area")
attach(values)
summary(RelativeCompactness)
summary(SurfaceArea)
summary(WallArea)
summary(RoofArea)
summary(OverallHeight)
summary(Orientation)
summary(GlazingArea)
summary(GlazingAreaDistribution)
summary(HeatingLoad)
summary(CoolingLoad)
table(HeatingLoad)
table(CoolingLoad)
set.seed(1)
engy_eff_rand <- engy_eff[order(runif(1000)), ]
engy_eff_train <- engy_eff_rand[1:900, ]
engy_eff_test  <- engy_eff_rand[901:1000, ]
mydata <- data.frame(engy_eff_train,engy_eff_test)
regression.model <- lm(HeatingLoad ~ CoolingLoad)
plot(HeatingLoad, CoolingLoad, xlab="x values", ylab="y values")
abline(lm(HeatingLoad ~ CoolingLoad, data = mydata))
methods(plot)
?plot.lm
plot(regression.model, which = 1)
mydata1 <- data.frame(engy_eff_train,engy_eff_test)
regression.model1 <- lm(CoolingLoad ~ HeatingLoad)
plot(CoolingLoad, HeatingLoad, xlab="x values", ylab="y values")
abline(lm(CoolingLoad ~ HeatingLoad, data = mydata))
methods(plot)
?plot.lm
plot(regression.model, which = 1)
engy_eff <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
#add engy_eff to a dataframe
values <- data.frame(engy_eff)
############## engy_eff Exploration ################
#Plot Heating Load againest Cooling Load
plot(engy_eff$HeatingLoad, engy_eff$CoolingLoad, xlab="Heating Load", ylab="Cooling Load")
#Plot Relative Compactness against the Surface Area
plot(engy_eff$RelativeCompactness, engy_eff$SurfaceArea, xlab="Relative Compactness", ylab="Surface Area")
#Summarize each attribute
attach(values)
summary(RelativeCompactness)
summary(SurfaceArea)
summary(WallArea)
summary(RoofArea)
summary(OverallHeight)
summary(Orientation)
summary(GlazingArea)
summary(GlazingAreaDistribution)
summary(HeatingLoad)
summary(CoolingLoad)
#look at the two predicted characteristics
table(HeatingLoad)
table(CoolingLoad)
######## Training and Testing Sets #############
set.seed(1)
engy_eff_rand <- engy_eff[order(runif(1000)), ]
engy_eff_train <- engy_eff_rand[1:900, ]
engy_eff_test  <- engy_eff_rand[901:1000, ]
########## Create Prediction Model - Heating Load #############
mydata <- data.frame(engy_eff_train,engy_eff_test)
regression.model <- lm(HeatingLoad ~ CoolingLoad)
plot(HeatingLoad, CoolingLoad, xlab="x values", ylab="y values")
abline(lm(HeatingLoad ~ CoolingLoad, data = mydata))
methods(plot)
library(C50)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
#add data to a dataframe
set.seed(2)
occ_detectRand <- occ_detect[order(runif(150)), ]
occ_detectTrain <- occ_detectRand[1:100, ]
occ_detectTest <- occ_detectRand[101:150, ]
prop.table(table(occ_detectTrain$Occupancy))
prop.table(table(occ_detectTest$Occupancy))
#occ_detectTreeModel <- C5.0(occ_detectTrain[-5], occ_detectTrain$Occupancy)
occ_detectTreeModel <- C5.0(as.factor(Occupancy) ~ ., data= occ_detectTrain)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
occ_detectPredict <- predict(occ_detectTreeModel, occocc_detectTest)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
occ_detectPredict <- predict(occ_detectTreeModel, occ_detectTest)
CrossTable(occ_detectPredict, occ_detectTest$Occupancy,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
engy_eff <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
values <- data.frame(engy_eff)
values <- data.frame(engy_eff)
values <- data.frame(engy_eff)
values <- data.frame(engy_eff)
values <- data.frame(engy_eff)
values <- data.frame(engy_eff)
values <- data.frame(engy_eff)
values <- data.frame(engy_eff)
plot(engy_eff$HeatingLoad, engy_eff$CoolingLoad, xlab="Heating Load", ylab="Cooling Load")
plot(engy_eff$RelativeCompactness, engy_eff$SurfaceArea, xlab="Relative Compactness", ylab="Surface Area")
attach(values)
summary(RelativeCompactness)
summary(SurfaceArea)
summary(WallArea)
summary(RoofArea)
summary(OverallHeight)
summary(Orientation)
summary(GlazingArea)
summary(GlazingAreaDistribution)
summary(HeatingLoad)
summary(CoolingLoad)
table(HeatingLoad)
table(CoolingLoad)
set.seed(1)
engy_eff_rand <- engy_eff[order(runif(1000)), ]
engy_eff_train <- engy_eff_rand[1:900, ]
engy_eff_test  <- engy_eff_rand[901:1000, ]
mydata <- data.frame(engy_eff_train,engy_eff_test)
regression.model <- lm(HeatingLoad ~ CoolingLoad)
plot(HeatingLoad, CoolingLoad, xlab="HeatingLoad", ylab="CoolingLoad")
abline(lm(HeatingLoad ~ CoolingLoad, data = mydata))
methods(plot)
?plot.lm
plot(regression.model, which = 1)
mydata1 <- data.frame(engy_eff_train,engy_eff_test)
regression.model1 <- lm(CoolingLoad ~ HeatingLoad)
plot(CoolingLoad, HeatingLoad, xlab="x CoolingLoad", ylab="HeatingLoad")
abline(lm(CoolingLoad ~ HeatingLoad, data = mydata))
methods(plot)
?plot.lm
plot(regression.model, which = 1)
install.packages('class')
install.packages('gmodels')
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
table(occ_detect$Occupancy)
View(occ_detect)
table(occ_detect$x)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
table(occ_detect$X)
occ_detect$Occupancy <- factor(occ_detect$X,
levels = c("1", "0"),
labels = c("Occupied", "Vacant"))
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
table(occ_detect$X)
occ_detect$X <- factor(occ_detect$X,
levels = c("1", "0"),
labels = c("Occupied", "Vacant"))
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
View(occ_detect)
View(occ_detect)
colnames(occ_detect)[colnames(occ_detect)=="X"] <- "Status"
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
str(occ_detect)
table(occ_detect$X)
colnames(occ_detect)[colnames(occ_detect)=="X"] <- "Status"
occ_detect$Status <- factor(occ_detect$Status,
levels = c("1", "0"),
labels = c("Occupied", "Vacant"))
str(occ_detect)
round(prop.table(table(occ_detect$Occupancy)) * 100, digits = 1)
View(occ_detect)
round(prop.table(table(occ_detect$Occupancy)) * 10, digits = 1)
View(occ_detect)
View(occ_detect)
summary(occ_detect[c("Temperature", "Humidity",
"Light")])
summary(occ_detect[c("C02", "Humidity",
"Light")])
summary(occ_detect[c("CO2", "Humidity",
"Light")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
table(occ_detect$X)
colnames(occ_detect)[colnames(occ_detect)=="X"] <- "Status"
occ_detect$Status <- factor(occ_detect$Status,
levels = c("1", "0"),
labels = c("Occupied", "Vacant"))
str(occ_detect)
round(prop.table(table(occ_detect$Occupancy)) * 100, digits = 1)
summary(occ_detect[c("CO2", "Humidity",
"Light")])
occ_detect_n <- as.data.frame(lapply(occ_detect[2:31], normalize))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
occ_detect_n <- as.data.frame(lapply(occ_detect[2:31], normalize))
occ_detect_n <- as.data.frame(lapply(occ_detect[2:8], normalize))
occ_detect_n <- as.data.frame(lapply(occ_detect[3:6], normalize))
View(occ_detect_n)
summary(occ_detect_n$Occupancy)
summary(occ_detect_n)
occ_detect_train <- occ_detect_n[1:469, ]
occ_detect_test <- occ_detect_n[470:569, ]
occ_detect_train_labels <- occ_detect[1:469, 1]
occ_detect_test_labels <- occ_detect[470:569, 1]
library(class)
occ_detect_test_pred <- knn(train = occ_detect_train, test =
occ_detect_test, cl = occ_detect_train_labels, k=21)
library(gmodels)
CrossTable(x = occ_detect_test, y = occ_detect_test_pred,
prop.chisq=FALSE)
occ_detect_test_pred <- knn(train = occ_detect_train, test = occ_detect_test, cl = occ_detect_train_labels, k=21)
CrossTable(x = occ_detect_test, y = occ_detect_test_pred,
prop.chisq=FALSE)
occ_detect_train <- occ_detect_n[1:469, ]
summary(occ_detect_test)
summary(occ_detect_test_pred)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
table(occ_detect$X)
colnames(occ_detect)[colnames(occ_detect)=="X"] <- "Status"
occ_detect$Status <- factor(occ_detect$Status,
levels = c("1", "0"),
labels = c("Occupied", "Vacant"))
str(occ_detect)
round(prop.table(table(occ_detect$Occupancy)) * 100, digits = 1)
summary(occ_detect[c("CO2", "Humidity",
"Light")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
occ_detect_n <- as.data.frame(lapply(occ_detect[3:6], normalize))
summary(occ_detect_n)
occ_detect_train <- occ_detect_n[1:469, ]
occ_detect_test <- occ_detect_n[470:569, ]
occ_detect_train_labels <- occ_detect[1:469, 1]
occ_detect_test_labels <- occ_detect[470:569, 1]
library(class)
occ_detect_test_pred <- knn(train = occ_detect_train, test = occ_detect_test, cl = occ_detect_train_labels, k=5)
library(gmodels)
CrossTable(x = occ_detect_test, y = occ_detect_test_pred,
prop.chisq=FALSE)
summary(occ_detect_test)
summary(occ_detect_test_pred)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
table(occ_detect$X)
colnames(occ_detect)[colnames(occ_detect)=="X"] <- "Status"
occ_detect$Status <- factor(occ_detect$Status,
levels = c("1", "0"),
labels = c("Occupied", "Vacant"))
str(occ_detect)
round(prop.table(table(occ_detect$Occupancy)) * 100, digits = 1)
summary(occ_detect[c("CO2", "Humidity",
"Light")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
occ_detect_n <- as.data.frame(lapply(occ_detect[3:6], normalize))
summary(occ_detect_n)
occ_detect_train <- occ_detect_n[1:469, ]
occ_detect_test <- occ_detect_n[470:569, ]
occ_detect_train_labels <- occ_detect[1:469, 1]
occ_detect_test_labels <- occ_detect[470:569, 1]
library(class)
occ_detect_test_pred <- knn(train = occ_detect_train, test = occ_detect_test, cl = occ_detect_train_labels, k=4)
library(gmodels)
CrossTable(x = occ_detect_test, y = occ_detect_test_pred,
prop.chisq=FALSE)
summary(occ_detect_test)
summary(occ_detect_test_pred)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
table(occ_detect$X)
colnames(occ_detect)[colnames(occ_detect)=="X"] <- "Status"
occ_detect$Status <- factor(occ_detect$Status,
levels = c("1", "0"),
labels = c("Occupied", "Vacant"))
str(occ_detect)
round(prop.table(table(occ_detect$Occupancy)) * 100, digits = 1)
summary(occ_detect[c("CO2", "Humidity",
"Light")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
occ_detect_n <- as.data.frame(lapply(occ_detect[3:6], normalize))
summary(occ_detect_n)
occ_detect_train <- occ_detect_n[1:469, 7]
occ_detect_test <- occ_detect_n[470:569, 7]
occ_detect_train_labels <- occ_detect[1:469, 7]
occ_detect_test_labels <- occ_detect[470:569, 7]
library(class)
occ_detect_test_pred <- knn(train = occ_detect_train, test = occ_detect_test, cl = occ_detect_train_labels, k=5)
occ_detect_test_pred <- knn(train = occ_detect_train, test = occ_detect_test, cl = occ_detect_train_labels, k=7)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
table(occ_detect$X)
colnames(occ_detect)[colnames(occ_detect)=="X"] <- "Status"
occ_detect$Status <- factor(occ_detect$Status,
levels = c("1", "0"),
labels = c("Occupied", "Vacant"))
str(occ_detect)
occ_detect <- occ_detect[lapply(occ_detect,length)>0]
round(prop.table(table(occ_detect$Occupancy)) * 100, digits = 1)
summary(occ_detect[c("CO2", "Humidity",
"Light")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
occ_detect_n <- as.data.frame(lapply(occ_detect[3:6], normalize))
summary(occ_detect_n)
occ_detect_train <- occ_detect_n[1:469, 7]
occ_detect_test <- occ_detect_n[470:569, 7]
occ_detect_train_labels <- occ_detect[1:469, 7]
occ_detect_test_labels <- occ_detect[470:569, 7]
library(class)
occ_detect_test_pred <- knn(train = occ_detect_train, test = occ_detect_test, cl = occ_detect_train_labels, k=7)
occ_detect_test_pred <- knn(train = occ_detect_train, test = occ_detect_test, cl = occ_detect_train_labels, k=4)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
str(occ_detect)
table(occ_detect$X)
colnames(occ_detect)[colnames(occ_detect)=="X"] <- "Status"
occ_detect$Status <- factor(occ_detect$Status,
levels = c("1", "0"),
labels = c("Occupied", "Vacant"))
str(occ_detect)
occ_detect <- occ_detect[lapply(occ_detect,length)>0]
round(prop.table(table(occ_detect$Occupancy)) * 100, digits = 1)
summary(occ_detect[c("CO2", "Humidity",
"Light")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
occ_detect_n <- as.data.frame(lapply(occ_detect[3:6], normalize))
summary(occ_detect_n)
occ_detect_train <- occ_detect_n[1:469, 1]
occ_detect_test <- occ_detect_n[470:569, 1]
occ_detect_train_labels <- occ_detect[1:469, 1]
occ_detect_test_labels <- occ_detect[470:569, 1]
library(class)
occ_detect_test_pred <- knn(train = occ_detect_train, test = occ_detect_test, cl = occ_detect_train_labels, k=4)
occ_detect_test_pred <- knn(train = data.frame(occ_detect_train), test = data.frame(occ_detect_test), cl = data.frame(occ_detect_train_labels), k=4)
occ_detect_test_pred <- knn(train = data.frame(occ_detect_train), test = data.frame(occ_detect_test), cl = occ_detect_train_labels, k=4)
library(gmodels)
CrossTable(x = occ_detect_test, y = occ_detect_test_pred,
prop.chisq=FALSE)
summary(occ_detect_test)
summary(occ_detect_test_pred)
View(normalize)
View(normalize)
library(C50)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
set.seed(2)
occ_detectRand <- occ_detect[order(runif(150)), ]
occ_detectTrain <- occ_detectRand[1:100, ]
occ_detectTest <- occ_detectRand[101:150, ]
prop.table(table(occ_detectTrain$Occupancy))
prop.table(table(occ_detectTest$Occupancy))
occ_detectTreeModel <- C5.0(as.factor(Occupancy) ~ ., data= occ_detectTrain)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
occ_detectPredict <- predict(occ_detectTreeModel, occ_detectTest)
plot(occ_detectTreeModel)
occ_detectTreeModel <- C5.0(occ_detectTrain[-5], occ_detectTrain$Occupancy)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
