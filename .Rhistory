occ_detect_train <- occ_detect_n[1:469, 1]
occ_detect_test <- occ_detect_n[470:569, 1]
occ_detect_train_labels <- occ_detect[1:469, 1]
occ_detect_test_labels <- occ_detect[470:569, 1]
library(class)
occ_detect_test_pred <- knn(train = occ_detect_train, test = occ_detect_test, cl = occ_detect_train_labels, k=4)
occ_detect_test_pred <- knn(train = data.frame(occ_detect_train), test = data.frame(occ_detect_test), cl = data.frame(occ_detect_train_labels), k=4)
occ_detect_test_pred <- knn(train = data.frame(occ_detect_train), test = data.frame(occ_detect_test), cl = occ_detect_train_labels, k=4)
library(gmodels)
CrossTable(x = occ_detect_test, y = occ_detect_test_pred,
prop.chisq=FALSE)
summary(occ_detect_test)
summary(occ_detect_test_pred)
View(normalize)
View(normalize)
library(C50)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
set.seed(2)
occ_detectRand <- occ_detect[order(runif(150)), ]
occ_detectTrain <- occ_detectRand[1:100, ]
occ_detectTest <- occ_detectRand[101:150, ]
prop.table(table(occ_detectTrain$Occupancy))
prop.table(table(occ_detectTest$Occupancy))
occ_detectTreeModel <- C5.0(as.factor(Occupancy) ~ ., data= occ_detectTrain)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
occ_detectPredict <- predict(occ_detectTreeModel, occ_detectTest)
plot(occ_detectTreeModel)
occ_detectTreeModel <- C5.0(occ_detectTrain[-5], occ_detectTrain$Occupancy)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
pairs(engy_eff)
engy_eff <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
#add engy_eff to a dataframe
values <- data.frame(engy_eff)
pairs(engy_eff)
cor(engy_eff)
library(C50)
library(gmodels)
install.packages("C50")
install.packages("gmodels")
library(C50)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
#add data to a dataframe
set.seed(2)
occ_detectRand <- occ_detect[order(runif(150)), ]
library(C50)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
#add data to a dataframe
set.seed(2)
occ_detectRand <- occ_detect[order(runif(150)), ]
occ_detectTrain <- occ_detectRand[1:100, ]
occ_detectTest <- occ_detectRand[101:150, ]
prop.table(table(occ_detectTrain$Occupancy))
prop.table(table(occ_detectTest$Occupancy))
#occ_detectTreeModel <- C5.0(occ_detectTrain[-5], occ_detectTrain$Occupancy)
occ_detectTreeModel <- C5.0(as.factor(Occupancy) ~ ., data= occ_detectTrain)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
occ_detectPredict <- predict(occ_detectTreeModel, occ_detectTest)
CrossTable(occ_detectPredict, occ_detectTest$Occupancy,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
library(C50)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
#add data to a dataframe
set.seed(2)
occ_detectRand <- occ_detect[order(runif(150)), ]
occ_detectTrain <- occ_detectRand[1:100, ]
occ_detectTest <- occ_detectRand[101:150, ]
prop.table(table(occ_detectTrain$Occupancy))
prop.table(table(occ_detectTest$Occupancy))
#occ_detectTreeModel <- C5.0(occ_detectTrain[-5], occ_detectTrain$Occupancy)
occ_detectTreeModel <- C5.0(as.factor(Occupancy) ~ ., data= occ_detectTrain)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
occ_detectTreeModel <- C5.0(occ_detectTrain[-5], occ_detectTrain$Occupancy)
library(C50)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
#add data to a dataframe
set.seed(2)
occ_detectRand <- occ_detect[order(runif(150)), ]
occ_detectTrain <- occ_detectRand[1:100, ]
occ_detectTest <- occ_detectRand[101:150, ]
prop.table(table(occ_detectTrain$Occupancy))
prop.table(table(occ_detectTest$Occupancy))
#occ_detectTreeModel <- C5.0(occ_detectTrain[-5], occ_detectTrain$Occupancy)
occ_detectTreeModel <- C5.0(as.factor(Occupancy) ~ ., data= occ_detectTrain)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
occ_detectPredict <- predict(occ_detectTreeModel, occ_detectTest)
CrossTable(occ_detectPredict, occ_detectTest$Occupancy,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn = c('predicted', 'actual'))
library(C50)
library(gmodels)
occ_detect <- read.csv("data/classification/OccupancyDetection.csv", stringsAsFactors = FALSE)
#add data to a dataframe
set.seed(2)
occ_detectRand <- occ_detect[order(runif(150)), ]
occ_detectTrain <- occ_detectRand[1:100, ]
occ_detectTest <- occ_detectRand[101:150, ]
prop.table(table(occ_detectTrain$Occupancy))
prop.table(table(occ_detectTest$Occupancy))
#occ_detectTreeModel <- C5.0(occ_detectTrain[-5], occ_detectTrain$Occupancy)
occ_detectTreeModel <- C5.0(as.factor(Occupancy) ~ ., data= occ_detectTrain)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
occ_detectTreeModel <- C5.0(as.factor(Occupancy) ~ ., data= occ_detectTrain)
summary(occ_detectTreeModel)
plot(occ_detectTreeModel)
plot(occ_detectTreeModel)
summary(occ_detectTreeModel)
View(occ_detect)
adult_income <- read.csv("data/classification/Adult_Income.csv")
library(C50)
library(gmodels)
adult_income <- read.csv("data/classification/Adult_Income.csv")
adult_income <- read.csv("data/classification/Adult_Income.csv", stringsAsFactors = FALSE)
View(adult_income)
set.seed(1)
head(adult_income)
head(adult_income)
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[80001:10000, ]
adult_income_model <- C5.0(wage ~ ., data = adult_income_train)
adult_income_model <- C5.0(default ~ ., data = adult_income_train)
adult_income_model <- C5.0(as.factor(Wage) ~ ., data = adult_income_train)
adult_income_predictions <- predict(adult_income_model, adult_income_test)
CrossTable(adult_income_predictions, adult_income_test$Wage,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
CrossTable(adult_income_predictions, adult_income_test$Wage,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
?CrossTable
library(C50)
library(gmodels)
adult_income <- read.csv("data/classification/Adult_Income.csv", stringsAsFactors = FALSE)
head(adult_income)
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[80001:10000, ]
adult_income_model <- C5.0(as.factor(Wage) ~ ., data = adult_income_train)
adult_income_predictions <- predict(adult_income_model, adult_income_test)
?CrossTable
CrossTable(adult_income_predictions, adult_income_test$Wage,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
summary(adult_income_model)
plot(adult_income_model)
warnings()
adult_income_predictions <- predict(adult_income_model, adult_income_test)
adult_income_predictions
CrossTable(adult_income_predictions, adult_income_test$Wage,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
pairs(adult_income_model)
pairs(adult_income)
?pairs
View(adult_income)
View(adult_income)
CrossTable(adult_income_predictions, adult_income_test,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
View(adult_income_rand)
adult_income <- read.csv("data/Classification/Adult_Income.csv", stringsAsFactors = FALSE)
str(adult_income)
View(adult_income)
table(adult_income$Wage)
adult_income$Wage <- factor(adult_income$Wage,
levels = c(">50K", "<=50K"),
labels = c("Yes", "No"))
round(prop.table(table(adult_income$Wage)) * 100, digits = 1)
View(adult_income)
adult_income <- read.csv("data/Classification/Adult_Income.csv", stringsAsFactors = FALSE)
str(adult_income)
table(adult_income$Wage)
round(prop.table(table(adult_income$Wage)) * 100, digits = 1)
summary(adult_income[c("Capital_Gain", "Capital_Loss",
"Hours_Per_Week")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
adult_income_n <- as.data.frame(lapply(adult_income[1:15], normalize))
View(adult_income)
adult_income_n <- as.data.frame(lapply(adult_income[11:13], normalize))
summary(adult_income_n$Capital_Gain)
View(adult_income)
adult_income_train <- adult_income_n[1:8000, ]
adult_income_test <- adult_income_n[8001:10000, ]
adult_income_train_labels <- adult_income[1:8000, 1]
adult_income_test_labels <- adult_income[8001:10000, 1]
library(class)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=21)
library(gmodels)
CrossTable(x = adult_income_test_labels, y = adult_income_test_pred,
prop.chisq=FALSE)
adult_income <- read.csv("data/Classification/Adult_Income.csv", stringsAsFactors = FALSE)
str(adult_income)
adult_income[is.na(adult_income)] <- 0
table(adult_income$Wage)
round(prop.table(table(adult_income$Wage)) * 100, digits = 1)
summary(adult_income[c("Capital_Gain", "Capital_Loss",
"Hours_Per_Week")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
adult_income_n <- as.data.frame(lapply(adult_income[11:13], normalize))
summary(adult_income_n$Capital_Gain)
adult_income_train <- adult_income_n[1:8000, ]
adult_income_test <- adult_income_n[8001:10000, ]
adult_income_train_labels <- adult_income[1:8000, 1]
adult_income_test_labels <- adult_income[8001:10000, 1]
library(class)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=21)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=3)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=2)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, use.all= FALSE, k=2)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=1)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=16)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=17)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=0)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=3)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=35)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=5)
adult_income <- read.csv("data/Classification/Adult_Income.csv", stringsAsFactors = FALSE)
str(adult_income)
#reset NA to 0
adult_income[is.na(adult_income)] <- 0
# table of Wage
table(adult_income$Wage)
# recode Wage as a factor >50K recoded to Yes, <=50k recoded to No
#There if user makes more than 50k, it is Yes, else No
#adult_income$Wage <- factor(adult_income$Wage,
#                        levels = c(">50K", "<=50K"),
#                       labels = c("Yes", "No"))
# table or proportions with more informative labels
round(prop.table(table(adult_income$Wage)) * 100, digits = 1)
# summarize three numeric features
summary(adult_income[c("Capital_Gain", "Capital_Loss",
"Hours_Per_Week")])
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# test normalization function prior to using it - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# normalize the adult_income data
adult_income_n <- as.data.frame(lapply(adult_income[11:13], normalize))
# confirm that normalization worked
summary(adult_income_n$Capital_Gain)
# create training and test data
adult_income_train <- adult_income_n[1:8000, ]
adult_income_test <- adult_income_n[8001:10000, ]
# create labels for training and test data
adult_income_train_labels <- adult_income[1:8000, 1]
adult_income_test_labels <- adult_income[8001:10000, 1]
## Step 3: Training a model on the data ----
library(class)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=5)
adult_income <- read.csv("data/Classification/Adult_Income.csv", stringsAsFactors = FALSE)
str(adult_income)
#reset NA to 0
adult_income[is.na(adult_income)] <- 0
# table of Wage
table(adult_income$Wage)
# recode Wage as a factor >50K recoded to Yes, <=50k recoded to No
#There if user makes more than 50k, it is Yes, else No
#adult_income$Wage <- factor(adult_income$Wage,
#                        levels = c(">50K", "<=50K"),
#                       labels = c("Yes", "No"))
# table or proportions with more informative labels
round(prop.table(table(adult_income$Wage)) * 100, digits = 1)
# summarize three numeric features
summary(adult_income[c("Capital_Gain", "Capital_Loss",
"Hours_Per_Week")])
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# test normalization function prior to using it - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# normalize the adult_income data
adult_income_n <- as.data.frame(lapply(adult_income[11:13], normalize))
# confirm that normalization worked
summary(adult_income_n$Capital_Gain)
# create training and test data
adult_income_train <- adult_income_n[1:3000, ]
adult_income_test <- adult_income_n[3001:3900, ]
# create labels for training and test data
adult_income_train_labels <- adult_income[1:3000, 1]
adult_income_test_labels <- adult_income[3001:3900, 1]
## Step 3: Training a model on the data ----
library(class)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=5)
CrossTable(x = adult_income_test_labels, y = adult_income_test_pred)
str(adult_income)
adult_income <- read.csv("data/Classification/Adult_Income.csv", stringsAsFactors = FALSE)
str(adult_income)
#reset NA to 0
adult_income[is.na(adult_income)] <- 0
# table of Wage
table(adult_income$Wage)
# recode Wage as a factor >50K recoded to Yes, <=50k recoded to No
#There if user makes more than 50k, it is Yes, else No
#adult_income$Wage <- factor(adult_income$Wage,
#                        levels = c(">50K", "<=50K"),
#                       labels = c("Yes", "No"))
# table or proportions with more informative labels
round(prop.table(table(adult_income$Wage)) * 100, digits = 1)
# summarize three numeric features
summary(adult_income[c("Capital_Gain", "Capital_Loss",
"Hours_Per_Week")])
# create normalization function
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# test normalization function prior to using it - result should be identical
normalize(c(1, 2, 3, 4, 5))
normalize(c(10, 20, 30, 40, 50))
# normalize the adult_income data
adult_income_n <- as.data.frame(lapply(adult_income[11:13], normalize))
# confirm that normalization worked
summary(adult_income_n$Capital_Gain)
# create training and test data
adult_income_train <- adult_income_n[1:3000, ]
adult_income_test <- adult_income_n[3001:3900, ]
# create labels for training and test data
adult_income_train_labels <- adult_income[1:3000, 1]
adult_income_test_labels <- adult_income[3001:3900, 1]
## Step 3: Training a model on the data ----
library(class)
adult_income_test_pred <- knn(train = adult_income_train, test =
adult_income_test, cl = adult_income_train_labels, k=5)
library(C50)
library(gmodels)
install.packages("C50")
install.packages("gmodels")
library(C50)
library(gmodels)
adult_income <- read.csv("data/classification/Adult_Income.csv", stringsAsFactors = FALSE)
head(adult_income)
#create a randomly shuffled sample for training and test data
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[80001:10000, ]
#Train
adult_income_model <- C5.0(as.factor(Wage) ~ ., data = adult_income_train)
summary(adult_income_model)
plot(adult_income_model)
pairs(adult_income_model)
pairs(engy_eff)
#add engy_eff to a dataframe
values <- data.frame(engy_eff)
engy_eff <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
#add engy_eff to a dataframe
values <- data.frame(engy_eff)
pairs(engy_eff)
engy_eff <- read.csv("data/regression/EnergyEfficiency.csv", stringsAsFactors = FALSE)
#add engy_eff to a dataframe
values <- data.frame(engy_eff)
pairs(engy_eff)
pairs(engy_eff)
cor(engy_eff)
summary(adult_income_model)
library(C50)
library(gmodels)
adult_income <- read.csv("data/classification/Adult_Income.csv", stringsAsFactors = FALSE)
head(adult_income)
#create a randomly shuffled sample for training and test data
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[80001:10000, ]
#Train
adult_income_model <- C5.0(as.factor(Wage) ~ ., data = adult_income_train)
summary(adult_income_model)
plot(adult_income_model)
#Evaluation
adult_income_predictions <- predict(adult_income_model, adult_income_test)
adult_income_predictions
?CrossTable
CrossTable(adult_income_predictions, adult_income_test$Wage,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
CrossTable(adult_income_predictions, adult_income_test$Wage,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
CrossTable(adult_income_predictions, adult_income_test$wage,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
CrossTable(adult_income_predictions, adult_income_test$Wage,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
library(C50)
library(gmodels)
adult_income <- read.csv("data/classification/Adult_Income.csv", stringsAsFactors = FALSE)
head(adult_income)
#create a randomly shuffled sample for training and test data
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[80001:10000, ]
#Train
adult_income_model <- C5.0(as.factor(Wage) ~ ., data = adult_income_train)
summary(adult_income_model)
plot(adult_income_model)
#Evaluation
adult_income_predictions <- predict(adult_income_model, adult_income_test)
adult_income_predictions
?CrossTable
CrossTable(adult_income_predictions, adult_income_test$Wage,
prop.chisq = FALSE, prop.c = FALSE, prop.r = FALSE,
dnn= c('predicted', 'actual'))
View(adult_income)
summary(Wage)
summary(adult_income$Wage)
adult_income$Wage <- as.factor(adult_income$Wage)
summary(adult_income$Wage)
#create a randomly shuffled sample for training and test data
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[80001:10000, ]
#Train
adult_income_model <- C5.0(as.factor(Wage) ~ ., data = adult_income_train)
summary(adult_income_model)
plot(adult_income_model)
library(C50)
library(gmodels)
adult_income <- read.csv("data/classification/Adult_Income.csv", stringsAsFactors = FALSE)
head(adult_income)
adult_income$Wage <- as.factor(adult_income$Wage)
#create a randomly shuffled sample for training and test data
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[80001:10000, ]
#Train
adult_income_model <- C5.0(Wage ~ ., data = adult_income_train)
summary(adult_income_model)
View(adult_income_test)
library(C50)
library(gmodels)
adult_income <- read.csv("data/classification/Adult_Income.csv", stringsAsFactors = FALSE)
head(adult_income)
adult_income$Wage <- as.factor(adult_income$Wage)
#create a randomly shuffled sample for training and test data
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[8001:10000, ]
#Train
adult_income_model <- C5.0(Wage ~ ., data = adult_income_train)
summary(adult_income_model)
adult_income <- read.csv("data/classification/Adult_Income.csv")
head(adult_income)
adult_income$Wage <- as.factor(adult_income$Wage)
#create a randomly shuffled sample for training and test data
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[8001:10000, ]
#Train
adult_income_model <- C5.0(Wage ~ ., data = adult_income_train)
summary(adult_income_model)
adult_income_model <- C5.0(as.factor(Wage) ~ ., data = adult_income_train)
adult_income <- read.csv("data/classification/Adult_Income.csv", stringsAsFactors = FALSE)
head(adult_income)
#create a randomly shuffled sample for training and test data
set.seed(1)
adult_income_rand <- adult_income[order(runif(10000)), ]
adult_income_train <- adult_income_rand[1:8000, ]
adult_income_test <- adult_income_rand[8001:10000, ]
#Train
adult_income_model <- C5.0(as.factor(Wage) ~ ., data = adult_income_train)
summary(adult_income_model)
adult_income_train$Wage <- as.factor(adult_income_train$Wage)
adult_income_test$Wage <- as.factor(adult_income_test$Wage)
#Evaluation
adult_income_predictions <- predict(adult_income_model, adult_income_test)
View(adult_income)
